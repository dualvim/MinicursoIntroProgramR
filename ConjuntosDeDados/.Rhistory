autores[i] <- NA
}else{
autores[i] <- corpusPDFs[[i]]$meta$author
}
# Metadado  Descricao
if(length(corpusPDFs[[i]]$meta$description) == 0){
descricoes[i] <- NA
}else{
descricoes[i] <- corpusPDFs[[i]]$meta$description
}
# Metadado Idioma
if(length(corpusPDFs[[i]]$meta$language) == 0){
idioma[i] <- NA
}else{
idioma[i] <- corpusPDFs[[i]]$meta$language
}
# Metadado Titulo (heading)
if(length(corpusPDFs[[i]]$meta$heading) == 0){
titulos[i] <- NA
}else{
titulos[i] <- corpusPDFs[[i]]$meta$heading
}
#Nome do arquivo
nomesArqs[i] <- corpusPDFs[[i]]$meta$id
}
head(corpusPDFs)
corpusPDFs[[1]]$meta$id
corpusPDFs[[2]]$meta$id
corpusPDFs[[3]]$meta$id
corpusPDFs[[4]]$meta$id
corpusPDFs[[3]]$meta$id <- "Art01.pdf"
corpusPDFs[[3]]$meta$id
corpusPDFs[[3]]$meta$id <- "04.pdf"
corpusPDFs[[1]]$meta$id
corpusPDFs[[2]]$meta$id
corpusPDFs[[3]]$meta$id
corpusPDFs[[4]]$meta$id
?as.data.frame
length(corpusPDFs)
idxArt <- 1:length(corpusPDFs)
?data.frame
dfDadosArtigos <- data.frame(idxArt,descricoes, autores, nomesArqs, titulos,idioma)
View(dfDadosArtigos)
library(stringr)
?stripWhitespace
a <- " "
a
stripWhitespace(a)
View(dfDadosArtigos)
dfDadosArtigos$descricoes[90]
dfDadosArtigos <- data.frame(idxArt, as.character(descricoes), as.character(autores),
as.character(nomesArqs), as.character(titulos), as.character(idioma))
dfDadosArtigos$descricoes[90]
View(dfDadosArtigos)
dim(dfDadosArtigos)
dim(dfDadosArtigos)[2]
?is.null
col <- 2
filtro <- is.null(dfDadosArtigos[, col])
filtro[95:99]
dfDadosArtigos[97, col]
dfDadosArtigos <- data.frame(idxArt, as.character(descricoes), as.character(autores),
as.character(nomesArqs), as.character(titulos), as.character(idioma))
dfDadosArtigos[97, col]
apply(dfDadosArtigos, class)
?apply
?vapply
sapply(dfDadosArtigos, class)
for(col in 2:dim(dfDadosArtigos)[2]){
dfDadosArtigos[, col] <- as.character(dfDadosArtigos)
#filtro <- is.null(dfDadosArtigos[, col])
#dfDadosArtigos[, col] <- is.null()
}
dfDadosArtigos <- data.frame(idxArt, descricoes, autores, nomesArqs, titulos, idioma)
for(col in 2:dim(dfDadosArtigos)[2]){
dfDadosArtigos[, col] <- as.character(dfDadosArtigos[, col])
#filtro <- is.null(dfDadosArtigos[, col])
#dfDadosArtigos[, col] <- is.null()
}
sapply(dfDadosArtigos, class)
dfDadosArtigos[97, 2]
is.null(dfDadosArtigos[97, 2])
dfDadosArtigos[, col][2]
for(col in 2:dim(dfDadosArtigos)[2]){
dfDadosArtigos[, col] <- as.character(dfDadosArtigos[, col])
filtro <- dfDadosArtigos[, col] == ""
dfDadosArtigos[, col][filtro] <- NA
}
View(dfDadosArtigos)
View(dfDadosArtigos)
library(tm)
#library(RWeka)
library(stringr)
# String com o direr贸rio com os artigos baixados na busca realizada no Scopus
dirArtigos <- "C:/Users/Eduardo/Desktop/Mestrado_UFU/Dissertacao/Artigos/Busca_Scopus/"
# Criar um objeto "corpus" com os pdfs dos arquivos do diretorio acima
corpusPDFs <- VCorpus(DirSource(dirArtigos), readerControl = list(reader = readPDF))
# Vetores com os metadados dos arquivos:
idxArt <- 1:length(corpusPDFs)
descricoes <- as.character()
autores <-as.character()
nomesArqs <- as.character()
titulos <- as.character()
idioma <- as.character()
for(i in 1:length(corpusPDFs)){
# Metadado Autor
if(length(corpusPDFs[[i]]$meta$author) == 0){
autores[i] <- NA
}else{
autores[i] <- corpusPDFs[[i]]$meta$author
}
# Metadado  Descricao
if(length(corpusPDFs[[i]]$meta$description) == 0){
descricoes[i] <- NA
}else{
descricoes[i] <- corpusPDFs[[i]]$meta$description
}
# Metadado Idioma
if(length(corpusPDFs[[i]]$meta$language) == 0){
idioma[i] <- NA
}else{
idioma[i] <- corpusPDFs[[i]]$meta$language
}
# Metadado Titulo (heading)
if(length(corpusPDFs[[i]]$meta$heading) == 0){
titulos[i] <- NA
}else{
titulos[i] <- corpusPDFs[[i]]$meta$heading
}
#Nome do arquivo
nomesArqs[i] <- corpusPDFs[[i]]$meta$id
}
head(corpusPDFs[[i]]$content, n=20)
head(corpusPDFs[[1]]$content, n=20)
corpusPDFs[[2]]$meta$id
head(corpusPDFs[[2]]$content, n=20)
head(corpusPDFs[[3]]$content, n=20)
corpusPDFs[[1]]$meta
corpusPDFs[[2]]$meta
corpusPDFs[[3]]$meta
corpusPDFs[[4]]$meta
head(corpusPDFs[[4]]$content, n=20)
# Data Frame com os resultados dos vetores acima:
dfDadosArtigos <- data.frame(idxArt, descricoes, autores, nomesArqs, titulos, idioma)
# Ver as classes dis elementos
sapply(dfDadosArtigos, class)
#Transformar os valores do dataframe em character e converter os valores iguais a "" para NA
for(col in 2:dim(dfDadosArtigos)[2]){
dfDadosArtigos[, col] <- as.character(dfDadosArtigos[, col])
filtro <- dfDadosArtigos[, col] == ""
dfDadosArtigos[, col][filtro] <- NA
}
View(dfDadosArtigos)
dfDadosArtigos[55, 2]
dfDadosArtigos[53, 2]
?oauth_app
?GET
library(stringr)
# String com o direr贸rio com os artigos baixados na busca realizada no Scopus
dirArtigos <- "C:/Users/Eduardo/Desktop/Mestrado_UFU/Dissertacao/Artigos/Busca_Scopus/"
# Criar um objeto "corpus" com os pdfs dos arquivos do diretorio acima
corpusPDFs <- VCorpus(DirSource(dirArtigos), readerControl = list(reader = readPDF))
# Vetores com os metadados dos arquivos:
idxArt <- 1:length(corpusPDFs)
descricoes <- as.character()
autores <-as.character()
nomesArqs <- as.character()
titulos <- as.character()
idioma <- as.character()
for(i in 1:length(corpusPDFs)){
# Metadado Autor
if(length(corpusPDFs[[i]]$meta$author) == 0){
autores[i] <- NA
}else{
autores[i] <- corpusPDFs[[i]]$meta$author
}
# Metadado  Descricao
if(length(corpusPDFs[[i]]$meta$description) == 0){
descricoes[i] <- NA
}else{
descricoes[i] <- corpusPDFs[[i]]$meta$description
}
# Metadado Idioma
if(length(corpusPDFs[[i]]$meta$language) == 0){
idioma[i] <- NA
}else{
idioma[i] <- corpusPDFs[[i]]$meta$language
}
# Metadado Titulo (heading)
if(length(corpusPDFs[[i]]$meta$heading) == 0){
titulos[i] <- NA
}else{
titulos[i] <- corpusPDFs[[i]]$meta$heading
}
#Nome do arquivo
nomesArqs[i] <- corpusPDFs[[i]]$meta$id
}
library(tm)
#library(RWeka)
library(stringr)
# String com o direr贸rio com os artigos baixados na busca realizada no Scopus
dirArtigos <- "C:/Users/Eduardo/Desktop/Mestrado_UFU/Dissertacao/Artigos/Busca_Scopus/"
# Criar um objeto "corpus" com os pdfs dos arquivos do diretorio acima
corpusPDFs <- VCorpus(DirSource(dirArtigos), readerControl = list(reader = readPDF))
# Vetores com os metadados dos arquivos:
idxArt <- 1:length(corpusPDFs)
descricoes <- as.character()
autores <-as.character()
nomesArqs <- as.character()
titulos <- as.character()
idioma <- as.character()
for(i in 1:length(corpusPDFs)){
# Metadado Autor
if(length(corpusPDFs[[i]]$meta$author) == 0){
autores[i] <- NA
}else{
autores[i] <- corpusPDFs[[i]]$meta$author
}
# Metadado  Descricao
if(length(corpusPDFs[[i]]$meta$description) == 0){
descricoes[i] <- NA
}else{
descricoes[i] <- corpusPDFs[[i]]$meta$description
}
# Metadado Idioma
if(length(corpusPDFs[[i]]$meta$language) == 0){
idioma[i] <- NA
}else{
idioma[i] <- corpusPDFs[[i]]$meta$language
}
# Metadado Titulo (heading)
if(length(corpusPDFs[[i]]$meta$heading) == 0){
titulos[i] <- NA
}else{
titulos[i] <- corpusPDFs[[i]]$meta$heading
}
#Nome do arquivo
nomesArqs[i] <- corpusPDFs[[i]]$meta$id
}
# Data Frame com os resultados dos vetores acima:
dfDadosArtigos <- data.frame(idxArt, descricoes, autores, nomesArqs, titulos, idioma)
# Ver as classes dis elementos
sapply(dfDadosArtigos, class)
#Transformar os valores do dataframe em character e converter os valores iguais a "" para NA
for(col in 2:dim(dfDadosArtigos)[2]){
dfDadosArtigos[, col] <- as.character(dfDadosArtigos[, col])
filtro <- dfDadosArtigos[, col] == ""
dfDadosArtigos[, col][filtro] <- NA
}
# String com o direr贸rio com os artigos baixados na busca realizada no Scopus
dirArtigos2 <- "C:/Users/Eduardo/Desktop/Mestrado_UFU/Dissertacao/Artigos/Artigos_Buscas1/"
# Criar um objeto "corpus" com os pdfs dos arquivos do diretorio
corpusPDFs2 <- VCorpus(DirSource(dirArtigos2), readerControl = list(reader = readPDF))
descricoes2 <- as.character()
autores2 <-as.character()
nomesArqs2 <- as.character()
titulos2 <- as.character()
idioma2 <- as.character()
for(i in 1:length(corpusPDFs2)){
if(length(corpusPDFs2[[i]]$meta$author) == 0){
autores2[i] <- ""
}else{
autores2[i] <- corpusPDFs2[[i]]$meta$author
}
if(length(corpusPDFs2[[i]]$meta$description) == 0){
descricoes2[i] <- ""
}else{
descricoes2[i] <- corpusPDFs2[[i]]$meta$description
}
if(length(corpusPDFs2[[i]]$meta$language) == 0){
idioma2[i] <- ""
}else{
idioma2[i] <- corpusPDFs2[[i]]$meta$language
}
if(length(corpusPDFs2[[i]]$meta$heading) == 0){
titulos2[i] <- ""
}else{
titulos2[i] <- corpusPDFs2[[i]]$meta$heading
}
nomesArqs2[i] <- corpusPDFs2[[i]]$meta$id
}
descricoes2
autores2
nomesArqs2
titulos2
idioma2
corpusPDFs[[1]]$content[2]
corpusPDFs[[1]]$content[3]
corpusPDFs[[1]]$content[5]
corpusPDFs[[1]]$content[6]
corpusPDFs[[1]]$content[10]
corpusPDFs[[1]]$content[11]
corpusPDFs[[1]]$content[12]
?strsplit
grepl(tolower(corpusPDFs[[1]]$content[12]), "keywords")
grepl(tolower(corpusPDFs[[1]]$content[12]), "*Keywords*")
grepl(tolower(corpusPDFs[[1]]$content[12]), "*keywords*")
grepl("Keywords", tolower(corpusPDFs[[1]]$content[12]))
?grep
grepl("*Keywords*", corpusPDFs[[1]]$content[12], ignore.case=TRUE)
grepl("Keywords", corpusPDFs[[1]]$content[12], ignore.case=TRUE)
strsplit(corpusPDFs[[1]]$content[12], split="keywords")[2]
strsplit(corpusPDFs[[1]]$content[12], split="keywords")
grep("Keywords", corpusPDFs[[1]]$content[12], ignore.case=TRUE)
strsplit(corpusPDFs[[1]]$content[12], split="Keywords")
strsplit(tolower(corpusPDFs[[1]]$content[12]), split="keywords")
strsplit(tolower(corpusPDFs[[1]]$content[12]), split="keywords")[2]
strsplit(tolower(corpusPDFs[[1]]$content[12]), split="keywords")[[2]]
strsplit(tolower(corpusPDFs[[1]]$content[12]), split="keywords")[[1]][2]
grepl("palavras+chave", corpusPDFs[[3]]$content[13], ignore.case=TRUE)
corpusPDFs[[3]]$content[13]
grepl("palavras[ -]chave", corpusPDFs[[3]]$content[13], ignore.case=TRUE)
grepl("keyword[s ]", corpusPDFs[[1]]$content[12], ignore.case=TRUE)
strsplit(tolower(corpusPDFs[[1]]$content[12]), split="keyword")[[1]][2]
strsplit(tolower(corpusPDFs[[1]]$content[12]), split="keyword[s ]")[[1]][2]
strsplit(tolower(corpusPDFs[[3]]$content[13]), split="palavras[ -]chave")[[1]][2]
##################################
# Minicurso R - Aula 3           #
##################################
# --> Importa莽茫o de dados e operar datasets
# --> Inicio da revis茫o da disciplina "M茅todos Quantitativos 1"
###############################################
# Parte 1 - Alterar o diretorio de trabalho:  #
###############################################
# 1.1 - Ver o diretorio de trabalho atual do R:
getwd()
# 1.2 - Alterar o diretorio de trabalho atual do R:
setwd("C:/Users/Eduardo/Desktop/Minicurso_R/RepoMinicursoIntroProgramR/MinicursoIntroProgramR/ConjuntosDeDados/")
setwd("C:\\Users\\Eduardo\\Desktop\\Minicurso_R\\RepoMinicursoIntroProgramR\\MinicursoIntroProgramR\\ConjuntosDeDados\\")
#
# --> Como caractere de indicacao de diretorio interno, o R nao aceira o caractere "\" utilizado no Windows
# --> Como caractere de separacao de diretorios, o R aceita "\\" ou "/"
############################################
# 2 - Importar dados de um arquivo .txt    #
############################################
# --> Importar o arquivo "Dados_Aula02_cdc.txt"
# --> 1a linha cont茅m os nomes das vari谩veis
# --> Valores separados por ","
# Conjunto de dados sobre fatores de riscos de sa煤de de 20000 indiv铆duos
#
# Carregar o conjunto de dados:
dados <- read.table(file="Aula03_ConjDados_cdc.txt", header=TRUE, sep=",")
# Tipo de objeto de "dados"
class(dados)
# Ver os nomes das vari谩veis contidas no data.frame "dados"
names(dados)
# Ver o n煤mero de observa莽玫es e de vari谩veis em "dados"
dim(dados)
dim(dados)[1]# N煤mero de linhas
dim(dados)[2]# N煤mero de colunas
# Ver as 5 primeiras observa莽玫es em "dados"
head(dados, n = 5)
# Ver as 5 煤ltimas observa莽玫es em "dados"
tail(dados, n = 5)
# Espa莽o em mem贸ria ocupado pelo objeto "dados"
object.size(dados) #em bytes
print(object.size(dados), units="Kb") # em Kb
print(object.size(dados), units="Mb") # em Mb
print(object.size(dados), units="Gb") # em Gb
######################################
# 3 - An谩lise de dados qualitativos  #
######################################
# Verificar o tipo de vari谩vel na coluna 'genhealth' de 'dados':
class(dados$genhlth) # "factor"
class(dados$weight)
# Contar a frequ锚ncia de cada tipo de estado de sa煤de em 'genhlth':
table(dados$genhlth)
table(dados$genhlth)[3]
#Alternativamente:
summary(dados$genhlth) #Retorna as frequencias de cada fator
summary(dados$weight) #Retorna os valores de cada quartil
# Frequ锚ncia relativa de cada estado de sa煤de:
table(dados$genhlth)/length(dados$genhlth)
paste0((table(dados$genhlth)/20000)*100,"%")
# Frequ锚ncia de fumantes nos dados
table(dados$smoke100)
# Tabela Relacionando o habito de fumar e a sa煤de dos indiv铆duos
table(dados$genhlth, dados$smoke100)
# Estabelecer uma ordem crescente nos fatores da vari谩vel "genhlth"
dados$genhlth <- factor(dados$genhlth,
order = TRUE,
levels = c("excellent", "very good", "good", "fair", "poor"))
# (bis) Tabela Relacionando o habito de fumar e a sa煤de dos indiv铆duos
table(dados$genhlth, dados$smoke100)
#################################################
# 4 - Gr谩ficos com as vari谩veis qualitativas    #
#################################################
# Gr谩fico de barras com as freq锚ncias de cda estado de sa煤de:
barplot(table(dados$genhlth), main ="Estados de sa煤de")
# Gr谩fico de barras com as frequ锚ncias de cada sexo na amostra:
barplot(table(dados$gender), main ="G锚nero")
barplot(table(dados$gender), main ="G锚nero", col="red")
barplot(table(dados$gender), main ="G锚nero", col=c("red", "blue"))
# Gr谩ficos de propor莽玫es:
tabSaudeFum <- table(dados$genhlth, dados$smoke100)
# Gr谩fico de propor莽玫es referentes a tabela acima
mosaicplot(tabSaudeFum,
main = "Saude Vs Fumar",
xlab = "Sa煤de",
ylab = "Fumante")
# Gr谩fico Mosaico apresentando as propor莽玫es de fumantes de cada sexo
tabFumGen <- table(dados$gender, dados$smoke100)
tabFumGen
mosaicplot(tabFumGen, main = "G锚nero Vs. Fumantes", xlab = "Sexo", ylab="Fumante")
########################################################
# 5 - estat铆sticas Descritivas  de dados quantitativos #
########################################################
# --> Estat铆sticas descritivas b谩sicas das observa莽玫es de "height" em "dados":
# --> Argumento "na.rm=TRUE": N茫o leva em conta as observa莽玫es faltantes (caso hajam) no c谩lculo
# M茅dia:
mean(dados$height, na.rm=TRUE)
mean(dados[1:3,5], na.rm=TRUE) #M茅dia dos 3 primeiros elementos da coluna height de dados
# Desvio-Padr茫o:
sd(dados$height, na.rm=TRUE)
# Mediana:
median(dados$height, na.rm=TRUE)
# Quartis, m茅dia e mediana
summary(dados$height)
quantile(dados$height, na.rm=TRUE)
# Ver os decis das observa莽玫es de "height"
quantile(dados$height, probs=seq(from=0, to = 1, by = 0.1), na.rm=TRUE)
###################################
# 6 - Fun莽玫es sapply() e tapply() #
###################################
# --> Caso queiramos realizar a mesma opera莽茫o para v谩rias colunas do nosso conjunto de dados,
#     devemos usar o comando sapply()
#
#     sapply(<conjunto_de_dados>, <fun莽茫o_aplicada>)
#
sapply(dados[, c(5,6,7,8)], mean) #Formato Vetor com os indeces numerados
sapply(dados[, c(5,6,7,8)], sd)
sapply(dados[, c(5,6,7,8)], sd, simplify=FALSE) #Formato Lista
# --> Caspo queiramos realizar uma determinada opera莽茫o para cada n铆vel de uma vari谩vel do tipo fator,
#     devemos usar o comando tapply()
#
#     tapply(<coluna_dados>, <coluna_Fator>, <funcao_aplicada>)
#
# --> Retornar o peso m茅dio em libras (weight) referente a cada grupo de 'genhealth'
tapply(dados$weight, dados$genhlth, mean)
tapply(dados$weight, dados$smoke100, mean) #Peso m茅dio de fumantes e n茫o fumantes
##########################################
# 7 - Gr谩ficos de dados quantitativos    #
##########################################
# histograma:
hist(dados$weight, main = "Histograma Peso", xlab="Peso (em lb)")
# Histograma com 100 "barras" verticais
hist(dados$weight, breaks = 100, main = "Histograma Peso", xlab="Peso (em lb)")
# Adicionar ao histograma a concentra莽茫o das observa莽玫es
rug(dados$weight, col="red")
#
# Histograma referente as densidades para a variavel "wtdesire"
# Ao inves de ter a frequencia no eixo-Y, queremos a densidade
hist(dados$age, freq = FALSE, main = "Histograma Idades", xlab="Idade", col="yellow")
lines(density(dados$age), col = "Green", lwd=5)
#
# Gr谩fico Boxplot:
boxplot(dados$height, main="Boxplot Alturas")
# Gr谩fico boxplot Peso e fumante
boxplot(dados$weight~dados$smoke100, #Plotar a vari谩vel "weight" e separar as observa莽玫es por "smoke"
xlab = "Fumante", # R贸tulo do eixo X
ylab = "Peso (em lb)", # R贸tulo do eixo Y
col=c("blue", "red")) #Pintar o boxplot dos n茫o-fumantes de azul e dos fumantes de veermelho
# Gr谩fico de dispers茫o entre peso e altura:
plot(dados$weight, dados$height,
main = "Peso Vs. Altura",
xlab = "Peso (em lb)",
ylab = "Altura (em pol.)")
# Vers茫o do gr谩fico colorida por g锚nero
plot(dados$weight, dados$height,
col = dados$gender,
main = "Peso Vs. Altura",
xlab = "Peso (em lb)",
ylab = "Altura (em pol.)")
#######################################
# Vers茫o colorida com legenda         #
#######################################
# 1 - Adicionar as observa莽玫es referentes ao sexo fenminino:
plot(x = dados$weight[dados$gender == "m"],
y = dados$height[dados$gender == "m"],
main = "Peso Vs. Altura",
xlab = "Peso (em lb)",
ylab = "Altura (em pol.)",
pch = 16,
col = "blue")
# 2 - Adicionar as observa莽玫es referentes ao sexo Masculino:
points(x = dados$weight[dados$gender == "f"],
y = dados$height[dados$gender == "f"],
pch = 8,
col = "pink")
# 3 - Adicionar a Legenda
legend("bottomright", pch = c(8, 16), col=c("blue", "pink"), legend = c("Masculino", "Feminino"))
plot(dados$weight, dados$height,
main = "Peso Vs. Altura",
xlab = "Peso (em lb)",
ylab = "Altura (em pol.)")
plot(dados$weight, dados$height,
col = dados$gender,
main = "Peso Vs. Altura",
xlab = "Peso (em lb)",
ylab = "Altura (em pol.)")
plot(x = dados$weight[dados$gender == "m"],
y = dados$height[dados$gender == "m"],
main = "Peso Vs. Altura",
xlab = "Peso (em lb)",
ylab = "Altura (em pol.)",
pch = 16,
col = "blue")
points(x = dados$weight[dados$gender == "f"],
y = dados$height[dados$gender == "f"],
pch = 8,
col = "pink")
legend("bottomright", pch = c(8, 16), col=c("blue", "pink"), legend = c("Masculino", "Feminino"))
